<?xml version="1.0" encoding="UTF-8"?>

<!-- scan : 默认true ，当配置文件发生变化时，自动重新加载 -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false-->
<configuration  scan="true" scanPeriod="60 seconds" debug="false">

    <contextName>MY_SERVER_NAME</contextName>
    <property name="LOG_PATH" value="${LOG_PATH:-.}" />
    <property name="FILE_NAME" value="MY_SERVER_NAME" />

    <!-- 0. 输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--ThresholdFilter为系统定义的拦截器，例如我们 >=INFO 级别的日志打印到console -->
        <!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>INFO</level>
        </filter>-->
        <!--
            <encoder>表示对日志进行编码：
                %d{HH: mm:ss.SSS}——日志输出时间
                %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
                %-5level——日志级别，并且使用5个字符靠左对齐
                %logger{36}——日志输出者的名字
                %msg——日志消息
                %n——平台的换行符
        -->
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
            </pattern>
        </layout>
    </appender>

    <!-- 1. 输出到文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_PATH}/info.${FILE_NAME}.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>

            <!--
                 <fileNamePattern>logback.%d{yyyy-MM-dd}.log</fileNamePattern>定义了日志的切分方式——把每一天的日志归档到一个文件中，
                 <maxHistory>30</maxHistory>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。也可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。
                 <totalSizeCap>1GB</totalSizeCap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。
            -->
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 2. 输出 info 日志到文件 ，但是不包含 error -->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_PATH}/fileInfoLog.${FILE_NAME}.log</File>
        <!--
            如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error-->
            <level>ERROR</level>
            <!--匹配到就禁止-->
            <onMatch>DENY</onMatch>
            <!--没有匹配到就允许-->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/fileInfoLog.${FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>

            <!--
                 <fileNamePattern>logback.%d{yyyy-MM-dd}.log</fileNamePattern>定义了日志的切分方式——把每一天的日志归档到一个文件中，
                 <maxHistory>30</maxHistory>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。也可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。
                 <totalSizeCap>1GB</totalSizeCap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。
            -->
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 3. 单独输出 error 日志 -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
            的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>${LOG_PATH}/error.${FILE_NAME}.log</File>
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>

        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>${LOG_PATH}/error.${FILE_NAME}.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>
    </appender>

    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG。
        可以包含零个或多个元素，标识这个appender将会添加到这个loger。


        <root level="info">
            <appender-ref ref="console" />
            <appender-ref ref="file" />
        </root>

    -->
    <!--
        <loger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>，
        <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。

        name:用来指定受此loger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
            如果未设置此属性，那么当前loger将会继承上级的级别。
        addtivity:是否向上级loger传递打印信息。默认是true。
    -->
    <logger name="com.dudu.controller"/>
    <!--
        <logger name="com.dudu.controller" />将控制controller包下的所有类的日志的打印，
        并没有设置打印级别，所以继承他的上级的日志级别“info”；
        没有设置addtivity，默认为true，将此loger的打印信息向上级传递；如果设置为false 就是不向上级上传日志。
        没有设置appender，此loger本身不打印任何信息。
        <root level="info">将root的打印级别设置为“info”，指定了名字为“console”的appender。

        当执行com.dudu.controller.LearnController类的login方法时，LearnController 在包com.dudu.controller中，所以首先执行
        <logger name="com.dudu.controller"/>，将级别 >=info 的日志信息传递给root，本身并不打印；
        root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console”appender将信息打印到控制台
    -->


    <!--
        控制com.dudu.controller.LearnController类的日志打印，打印级别为“WARN”;
        additivity属性为false，表示此loger的打印信息不再向上级传递;
        指定了名字为“console”的appender;

        这时候执行com.dudu.controller.LearnController类的login方法时，先执行<logger name="com.dudu.controller.LearnController" level="WARN" additivity="false">,
        将级别 >=“WARN” 的日志信息交给此loger指定的名为“console”的appender处理，在控制台中打出日志，不再向上级root传递打印信息。

        【可以使用这个特性，屏蔽指定类 或者 包的日志，或者输出到特定文件】
    -->
    <logger name="com.dudu.controller.LearnController" level="WARN" additivity="false">
        <appender-ref ref="console"/>
    </logger>

    <!--
    当然如果你把additivity=”false”改成additivity=”true”的话，就会打印两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。
    -->


    <!--开发环境:打印控制台-->
    <springProfile name="dev">
        <root level="DEBUG">
            <appender-ref ref="console"/>
            <appender-ref ref="file"/>
            <appender-ref ref="error"/>
        </root>
    </springProfile>

    <!--测试环境:打印控制台-->
    <springProfile name="test">
        <!-- 打印sql -->
        <root level="DEBUG">
            <appender-ref ref="file"/>
            <appender-ref ref="error"/>
        </root>
    </springProfile>

    <!--生产环境:打印控制台和输出到文件-->
    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="file"/>
            <appender-ref ref="error"/>
        </root>
    </springProfile>

</configuration>